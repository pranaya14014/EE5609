# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__NrkrkSE6MYLEYEgSDy2BS4x0EHPwiw
"""

import numpy as np
from numpy import matrix as m
import matplotlib.pyplot as plt
from numpy import linalg as LA

#Generating points on an ellipse
def ellipse_gen(a,b):
    len = 100
    theta = np.linspace(0,2*np.pi,len)
    x_ellipse = np.zeros((2,len))
    x_ellipse[0,:] = a*np.cos(theta)
    x_ellipse[1,:] = b*np.sin(theta)
    return x_ellipse


#Given values
c = np.array(([0,0]))
V = np.array(([5,1],[1,5]))
u = np.array(([-7,-11]))
f = 27
#Values after center is moved
V1 = np.array(([5,1],[1,5]))
u1 = np.array(([0,0]))
f_1=-2
cs = -LA.inv(V)@u
cs_1=-LA.inv(V1)@u1
cst = cs[np.newaxis, :].T
cst_1 = cs_1[np.newaxis, :].T
#Eigenvalues and eigenvectors
D_vec,P= LA.eig(V)
D = np.diag(D_vec)
D_vec_1,P_1= LA.eig(V1)
D_1 = np.diag(D_vec_1)
utV_1u = np.matmul(np.matmul(u.T,np.linalg.inv(V)),u)
a = np.sqrt(utV_1u/D_vec[1])
b = np.sqrt(utV_1u/D_vec[0])
xStandardEllipse = ellipse_gen(a,b)
a_1 = np.sqrt(utV_1u/D_vec_1[1])
b_1 = np.sqrt(utV_1u/D_vec_1[0])
xStandardEllipse1 = ellipse_gen(a_1,b_1)

#Major and Minor Axes
MajorStandard = np.array(([a,0]))
MinorStandard = np.array(([0,b]))
    
xActualEllipse = P@xStandardEllipse+cst
MajorActual = P@MajorStandard+cst[0]
MinorActual = P@MinorStandard+cst[1]
xStandardEllipse1 = P_1@xStandardEllipse+cst_1
MajorActual1= P_1@MajorStandard+cst_1[0]
MinorActual1 = P_1@MinorStandard+cst_1[1]

#setting up plot
fig = plt.figure()
ax = fig.add_subplot(111, aspect='equal')
len = 50
y = np.linspace(-10,10,len)
#Plotting the standard ellipse
plt.plot(xStandardEllipse[0,:],xStandardEllipse[1,:],label='Standard ellipse')
#Plotting the actual ellipse
plt.plot(xStandardEllipse1[0,:],xStandardEllipse1[1,:],label=' ellipse at (0,0) ')
plt.plot(xActualEllipse[0,:],xActualEllipse[1,:],label='ellipse at (1,2)')

#Labeling the coordinates
tri_coords = np.vstack((c,cs,cs_1)).T
plt.scatter(tri_coords[0,:], tri_coords[1,:])
vert_labels = ['$c$','$c_1$','$c^{\prime}$']
for i, txt in enumerate(vert_labels):
    plt.annotate(txt, # this is the text
                 (tri_coords[0,i], tri_coords[1,i]), # this is the point to label
                 textcoords="offset points", # how to position the text
                 xytext=(0,10), # distance from text to points (x,y)
                 ha='center') # horizontal alignment can be left, right or center

plt.legend(loc='best')
plt.grid()
plt.axis('equal')
plt.show()
plt.savefig("ellipse.png")