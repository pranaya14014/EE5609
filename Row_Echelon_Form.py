# -*- coding: utf-8 -*-
"""Row_Echelon_Form.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tlSdWANd8EIZYZ7lA4IATl51yvIQcwRB
"""

import numpy as np
# Inputing No of rows
m =int(input("input the number of rows:")) 
# Inputing No of columns
n = int(input("input the number of columns:"))
if (m*n != 0):
  print("For matrix generation choose the options\n Type 1: Random generation, Type any number except 1: Manual entry")
  a = int(input())

#----------------- Matrix Generation------------------------
if a==1 and (m*n !=0):
  #randomly generating the matrix
  A = np.random.randint(10,size=(m,n)) #for simplicticity generating numbers between [1,10)
  A = A.astype(float)
  print("Original matrix:\n",A)
elif (m*n !=0):
  #manually entering the elements in the matrix
  l=[]
  print("Enter the array elements one after other")
  for i in range(0,m*n):
    l.append(float(input()))
  A= np.array(l).reshape(m,n)
  A = A.astype(float)
  print("Original matrix:\n",A)

#Defining few variables which will be used later 
count = 0 
a = []

#----------------- Main Program for performing Row reduction---------------------------------

# ***** CASE1: Columns = Rows *********
# Reduced Row Echelon form and inverse for non-singular square matrix
if m == n !=0 and np.linalg.det(A)!=0:
  I = np.identity(m,dtype='float')
  A = np.concatenate((A,I),axis=1)
  #checking if coloumns and rows are not equal to zero
  if n !=count and m!=count:
    #Checking if the pivot element is zero or not and swapping the rows accordingly
    for i in range(0,m):
      if A[i,count] == 0 and i<m-1:
        for k in range(count,m):
          while A[k,count] != 0:
            a.append(k)
            break
        if a == []:
          a.append(count)
        A[[count,a[0]]] =A[[a[0],count]]
        a.clear()
      # making the pivot element 1
      if A[i,count] != 0:
        A[[i]] = A[[i]]/A[i,count] 
      #Row operations:
      for j in range(0,m):
        if j != i:
          A[[j]] =  A[j]-(A[j,count]*A[i])
      #print("Row operation Stepwise:\n",A)
      count = count+1    
    A[A==-0] = 0 # if any negative zero terms are there changing it to zero
    print("Final row reduced echelon form:\n",A[:,:m])
    print("Inverse:\n",A[:,m:] )
  #if both lengths of row and column is zero
  else:
    print("No row reduced Echelon form")

# ***** CASE2: Columns >= Rows ********
# Reduced Row Echelon form for rectangular matrix whose rows<coloumns and singular square matrix
elif m<=n:
  #checking if coloumns and rows are not equal to zero
  if n !=count and m!=count:
    if np.all(A==0):
      print("No row reduced Echelon form")
    #exceptional case if the single row matrix with the frst element is zero
    elif m==1 and A[0,0]==0:
      for k in range(n):
        while A[m-1,k] != 0:
          a.append(k)
          break
      A[[m-1]]=A[[m-1]]/A[m-1,a[0]] # making the next non-zero element 1
      print("Final row reduced echelon form:\n", A)
    else:
      #Checking if the pivot element is zero or not and swapping the rows accordingly
      for i in range(0,m):
        if A[i,count] == 0 and i<m-1:
          for k in range(count,m):
            while A[k,count] != 0:
              a.append(k)
              break
          if a == []:
            a.append(count)
          A[[count,a[0]]] =A[[a[0],count]]
          a.clear()
        # making the pivot element 1
        if A[i,count] != 0:
          A[[i]] = A[[i]]/A[i,count] 
        #Row operations for row reduction:
        for j in range(0,m):
          if j != i:
            A[[j]] =  A[j]-(A[j,count]*A[i])          
        #print("Row operation Stepwise:\n",A)
        count = count+1

      A[A==-0] = 0 # if any negative zero terms are there changing it to zero
      print("Final row reduced echelon form:\n", A) 
  #if both lengths of row and column is zero
  else:
    print("No row reduced Echelon form")

# ***** CASE3: Columns > Rows *******
# Reduced Row Echelon form for rectangular matrix whose rows>coloumns
else:
  #checking if coloumns and rows are not equal to zero
  if n !=count and m!=count:
    if np.all(A==0):
      print("No row reduced Echelon form")
    else:
      #Checking if the pivot element is zero or not and swapping the rows accordingly2
      for i in range(0,n):
        if A[i,count] == 0 and i<m-1:
          for k in range(count,m):
            while A[k,count] != 0:
              a.append(k)
              break
          if a == []:
            a.append(count)
          A[[count,a[0]]] =A[[a[0],count]]
          a.clear()
        # making the pivot element 1
        if A[i,count] != 0:
          A[[i]] = A[[i]]/A[i,count] 
        #Row operations for row reduction: 
        for j in range(0,m):
          if j != i:
            A[[j]] =  A[j]-(A[j,count]*A[i])
      #print("Row operation stepwise:\n",A)
        count = count+1

      A[A==-0] = 0 # if any negative zero terms are there changing it to zero
      print("Final row reduced echelon form:\n", A)
  #if both lengths of row and column is zero
  else: 
    print("No row reduced echelon form")